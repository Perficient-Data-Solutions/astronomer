---
version: "2"

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  worker_data:
  es_data:

services:
  postgres:
    image: postgres:10.1-alpine
    restart: unless-stopped
    labels:
      io.astronomer.docker: "true"
      io.astronomer.docker.open: "true"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql

  redis:
    image: redis:4.0.6-alpine
    restart: unless-stopped
    labels:
      io.astronomer.docker: "true"
      io.astronomer.docker.open: "true"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  scheduler:
    image: ${AIRFLOW_IMAGE}:${AIRFLOW_IMAGE_TAG}
    command: ["airflow", "scheduler"]
    restart: unless-stopped
    user: astro
    labels:
      io.astronomer.docker: "true"
      io.astronomer.docker.open: "true"
      io.astronomer.docker.component: "airflow-scheduler"
    depends_on:
      - postgres
      - redis
      # - statsd-exporter
    env_file:
      - airflow.env
    volumes:
      - $AIRFLOW_HOME/dags:/usr/local/airflow/dags:ro
      - $AIRFLOW_HOME/plugins:/usr/local/airflow/plugins:ro

  webserver:
    image: ${AIRFLOW_IMAGE}:${AIRFLOW_IMAGE_TAG}
    command: ["airflow", "webserver"]
    restart: unless-stopped
    user: astro
    labels:
      io.astronomer.docker: "true"
      io.astronomer.docker.open: "true"
      io.astronomer.docker.component: "airflow-webserver"
    depends_on:
      - scheduler # Wait for scheduler to avoid race to init db in entrypoint.sh
      - postgres
      - redis
    env_file:
      - airflow.env
    ports:
      - "8080:8080"
    volumes:
      - $AIRFLOW_HOME/dags:/usr/local/airflow/dags:ro
      - $AIRFLOW_HOME/plugins:/usr/local/airflow/plugins:ro

  worker:
    image: ${AIRFLOW_IMAGE}:${AIRFLOW_IMAGE_TAG}
    command: ["airflow", "worker"]
    restart: unless-stopped
    user: astro
    labels:
      io.astronomer.docker: "true"
      io.astronomer.docker.open: "true"
      io.astronomer.docker.component: "airflow-worker"
    depends_on:
      - postgres
      - redis
      - scheduler
    env_file:
      - airflow.env
    volumes:
      - $AIRFLOW_HOME/dags:/usr/local/airflow/dags:ro
      - $AIRFLOW_HOME/plugins:/usr/local/airflow/plugins:ro
      - worker_data:/usr/local/airflow/logs

  worker-gc:
    image: ${AIRFLOW_IMAGE}:${AIRFLOW_IMAGE_TAG}
    restart: unless-stopped
    command: ["crond", "-f", "-d", "0"]
    environment:
      ASTRONOMER__AIRFLOW__WORKER_LOGS_RETENTION_DAYS: 1
    labels:
      io.astronomer.docker: "true"
      io.astronomer.docker.open: "true"
      io.astronomer.docker.component: "airflow-worker-gc"
    volumes:
      - worker_data:/usr/local/airflow/logs

  statsd-exporter:
    image: astronomerinc/ap-statsd-exporter:latest
    command:
      - "-statsd.mapping-config=/etc/statsd-exporter/mappings.yml"
    restart: unless-stopped
    depends_on:
      - prometheus
    labels:
      io.astronomer.docker: "true"
      io.astronomer.docker.open: "true"
    ports:
      - "9102:9102"

  prometheus:
    image: astronomerinc/ap-prometheus:latest
    command:
      - "--config.file=/etc/prometheus/config/docker-compose.yml"
      - "--storage.tsdb.path=/prometheus"
    restart: unless-stopped
    labels:
      io.astronomer.docker: "true"
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus

  fluentd:
    image: astronomerinc/ap-fluentd:latest
    restart: unless-stopped
    labels:
      io.astronomer.docker: "true"
      io.astronomer.docker.open: "true"
    ports:
      - "24224:24224"
    links:
      - elasticsearch
    volumes:
      - ./input.conf:/etc/fluent/config.d/input.conf
      - /var/lib/docker/containers:/var/lib/docker/containers

  elasticsearch:
    image: astronomerinc/ap-elasticsearch
    restart: unless-stopped
    labels:
      io.astronomer.docker: "true"
      io.astronomer.docker.open: "true"
    environment:
      DISCOVERY_SERVICE: "127.0.0.1:9302"
    ports:
      - "9200:9200"
      - "9300:9300"
    expose:
      - 9200
      - 9300
    volumes:
      - es_data:/usr/share/elasticsearch/data

  kibana:
    image: astronomerinc/ap-kibana
    restart: unless-stopped
    labels:
      io.astronomer.docker: "true"
      io.astronomer.docker.open: "true"
    environment:
      # ELASTICSEARCH_URL: "http://docker.for.mac.localhost:9200"
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
    depends_on:
      - elasticsearch
    links:
      - elasticsearch
    ports:
      - "5601:5601"
